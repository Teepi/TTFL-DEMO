// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using Microsoft.EntityFrameworkCore;

namespace TTFL.ENTITIES
{
    public partial class TTFLContext : DbContext
    {
        public TTFLContext()
        {
        }

        public TTFLContext(DbContextOptions<TTFLContext> options)
            : base(options)
        {
        }

        public virtual DbSet<NbaPlayers> NbaPlayers { get; set; }
        public virtual DbSet<NbaTeams> NbaTeams { get; set; }
        public virtual DbSet<Pick> Pick { get; set; }
        public virtual DbSet<PickPoints> PickPoints { get; set; }
        public virtual DbSet<PickTeamJson> PickTeamJson { get; set; }
        public virtual DbSet<Player> Player { get; set; }
        public virtual DbSet<Team> Team { get; set; }
        public virtual DbSet<TeamRank> TeamRank { get; set; }
        public virtual DbSet<Statistics> Statistics { get; set; }
        public virtual DbSet<GameDate> GameDate { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<NbaPlayers>(entity =>
            {
                entity.HasKey(e => e.PersonId);

                entity.ToTable("NBA_PLAYERS");

                entity.HasIndex(e => e.PersonId, "IX_NBA_PLAYERS_PERSON_ID")
                    .IsUnique();

                entity.Property(e => e.PersonId)
                    .ValueGeneratedNever()
                    .HasColumnName("PERSON_ID");

                entity.Property(e => e.PlayerFirstName).HasColumnName("PLAYER_FIRST_NAME");

                entity.Property(e => e.PlayerLastName).HasColumnName("PLAYER_LAST_NAME");

                entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");

                entity.Property(e => e.PlayerFullName).HasColumnName("PLAYER_FULL_NAME");

                entity.HasOne(d => d.NbaTeam)
                    .WithMany(p => p.NbaPlayers)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<NbaTeams>(entity =>
            {
                entity.HasKey(e => e.TeamId);

                entity.ToTable("NBA_TEAMS");

                entity.HasIndex(e => e.Logo, "IX_NBA_TEAMS_LOGO")
                    .IsUnique();

                entity.Property(e => e.TeamName).HasColumnName("TEAM_NAME");

                entity.Property(e => e.Logo)
                    .IsRequired()
                    .HasColumnName("LOGO");

                entity.Property(e => e.TeamSlug).HasColumnName("TEAM_SLUG");

                entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");
            });

            modelBuilder.Entity<Pick>(entity =>
            {
                entity.HasKey(e => e.PId);

                entity.ToTable("PICK");

                entity.HasIndex(e => e.PDate, "IX_PICK_P_DATE")
                    .IsUnique();

                entity.HasIndex(e => e.PNumber, "IX_PICK_P_NUMBER")
                    .IsUnique();

                entity.Property(e => e.PId).HasColumnName("P_ID");

                entity.Property(e => e.PDate)
                    .IsRequired()
                    .HasColumnType("DATETIME")
                    .HasColumnName("P_DATE");

                entity.Property(e => e.PIsScrapped).HasColumnName("P_IS_SCRAPPED");

                entity.Property(e => e.PNumber).HasColumnName("P_NUMBER");
            });

            modelBuilder.Entity<PickPoints>(entity =>
            {
                entity.HasKey(e => e.PpId);

                entity.ToTable("PICK_POINTS");

                entity.Property(e => e.PpId).HasColumnName("PP_ID");

                entity.Property(e => e.BestPick).HasColumnName("BEST_PICK");

                entity.Property(e => e.Evolution).HasColumnName("EVOLUTION");

                entity.Property(e => e.HellPick).HasColumnName("HELL_PICK");

                entity.Property(e => e.PickId).HasColumnName("PICK_ID");

                entity.Property(e => e.PickedPlayer)
                    .IsRequired()
                    .HasColumnName("PICKED_PLAYER");

                entity.Property(e => e.PickedPlayerName).HasColumnName("PICKED_PLAYER_NAME");

                entity.Property(e => e.PickerPlayerPoints).HasColumnName("PICKER_PLAYER_POINTS");

                entity.Property(e => e.PlayerId).HasColumnName("PLAYER_ID");

                entity.Property(e => e.Rank).HasColumnName("RANK");

                entity.Property(e => e.TeamPosition).HasColumnName("TEAM_POSITION");

                entity.Property(e => e.TotalPoints).HasColumnName("TOTAL_POINTS");

                entity.Property(e => e.NbaPlayerId).HasColumnName("NBA_PLAYER_ID");

                entity.HasOne(d => d.Pick)
                    .WithMany(p => p.PickPoints)
                    .HasForeignKey(d => d.PickId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Player)
                    .WithMany(p => p.PickPoints)
                    .HasForeignKey(d => d.PlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.NbaPlayer)
                    .WithMany(p => p.PickPoints)
                    .HasForeignKey(d => d.NbaPlayerId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<PickTeamJson>(entity =>
            {
                entity.HasKey(e => new { e.PickId, e.TeamId });

                entity.ToTable("PICK_TEAM_JSON");

                entity.Property(e => e.PickId).HasColumnName("PICK_ID");

                entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");

                entity.Property(e => e.Json)
                    .IsRequired()
                    .HasColumnName("JSON");

                entity.HasOne(d => d.Pick)
                    .WithMany(p => p.PickTeamJson)
                    .HasForeignKey(d => d.PickId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.PickTeamJson)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Player>(entity =>
            {
                entity.HasKey(e => e.PId);

                entity.ToTable("PLAYER");

                entity.Property(e => e.PId).HasColumnName("P_ID");

                entity.Property(e => e.PUsername)
                    .IsRequired()
                    .HasColumnName("P_USERNAME");

                entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.Player)
                    .HasForeignKey(d => d.TeamId);
            });

            modelBuilder.Entity<Team>(entity =>
            {
                entity.HasKey(e => e.TId);

                entity.ToTable("TEAM");

                entity.HasIndex(e => e.TName, "IX_TEAM_T_NAME")
                    .IsUnique();

                entity.Property(e => e.TId).HasColumnName("T_ID");

                entity.Property(e => e.TName)
                    .IsRequired()
                    .HasColumnName("T_NAME");
            });

            modelBuilder.Entity<TeamRank>(entity =>
            {
                entity.HasKey(e => new { e.TeamId, e.PickId });

                entity.ToTable("TEAM_RANK");

                entity.Property(e => e.TeamId).HasColumnName("TEAM_ID");

                entity.Property(e => e.PickId).HasColumnName("PICK_ID");

                entity.Property(e => e.Rank).HasColumnName("RANK");

                entity.HasOne(d => d.Pick)
                    .WithMany(p => p.TeamRank)
                    .HasForeignKey(d => d.PickId)
                    .OnDelete(DeleteBehavior.ClientSetNull);

                entity.HasOne(d => d.Team)
                    .WithMany(p => p.TeamRank)
                    .HasForeignKey(d => d.TeamId)
                    .OnDelete(DeleteBehavior.ClientSetNull);
            });

            modelBuilder.Entity<Statistics>(entity =>
            {
                entity.ToTable("STATISTICS");

                entity.HasIndex(e => e.Key, "IX_STATISTICS_KEY")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Key)
                    .IsRequired()
                    .HasColumnName("KEY");

                entity.Property(e => e.Value).HasColumnName("VALUE");

                entity.Property(e => e.Value2).HasColumnName("VALUE_2");

                entity.Property(e => e.Value3).HasColumnName("VALUE_3");
            });

            modelBuilder.Entity<GameDate>(entity =>
            {
                entity.ToTable("GAME_DATE");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Date)
                    .IsRequired()
                    .HasColumnName("DATE");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}